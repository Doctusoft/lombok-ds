diff --git a/src/core/lombok/eclipse/DeferUntilPostDiet.java b/src/core/lombok/eclipse/DeferUntilPostDiet.java
new file mode 100644
index 0000000..64d2444
--- /dev/null
+++ b/src/core/lombok/eclipse/DeferUntilPostDiet.java
@@ -0,0 +1,11 @@
+package lombok.eclipse;
+
+import java.lang.annotation.ElementType;
+import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
+
+@Target(ElementType.TYPE)
+@Retention(RetentionPolicy.RUNTIME)
+public @interface DeferUntilPostDiet {
+}
\ No newline at end of file
diff --git a/src/core/lombok/eclipse/EclipseASTVisitor.java b/src/core/lombok/eclipse/EclipseASTVisitor.java
index 7f9faf4..d76bb5c 100644
--- a/src/core/lombok/eclipse/EclipseASTVisitor.java
+++ b/src/core/lombok/eclipse/EclipseASTVisitor.java
@@ -43,13 +43,6 @@ import org.eclipse.jdt.internal.compiler.ast.TypeReference;
  */
 public interface EclipseASTVisitor {
 	/**
-	 * Return true if this handler should not be run in the diet parse phase.
-	 * 'diet parse' is where method bodies aren't filled in yet. If you have a method-level annotation that modifies the contents of that method,
-	 * return {@code true} here. Otherwise, return {@code false} here.
-	 */
-	boolean deferUntilPostDiet();
-	
-	/**
 	 * Called at the very beginning and end.
 	 */
 	void visitCompilationUnit(EclipseNode top, CompilationUnitDeclaration unit);
diff --git a/src/core/lombok/eclipse/EclipseAnnotationHandler.java b/src/core/lombok/eclipse/EclipseAnnotationHandler.java
index aa8fbc2..2693b81 100644
--- a/src/core/lombok/eclipse/EclipseAnnotationHandler.java
+++ b/src/core/lombok/eclipse/EclipseAnnotationHandler.java
@@ -59,13 +59,4 @@ public abstract class EclipseAnnotationHandler<T extends java.lang.annotation.An
 	 */
 	public void preHandle(AnnotationValues<T> annotation, org.eclipse.jdt.internal.compiler.ast.Annotation ast, EclipseNode annotationNode) {
 	}
-	
-	/**
-	 * Return true if this handler should not be run in the diet parse phase.
-	 * 'diet parse' is where method bodies aren't filled in yet. If you have a method-level annotation that modifies the contents of that method,
-	 * return {@code true} here. Otherwise, return {@code false} here.
-	 */
-	public boolean deferUntilPostDiet() {
-		return false;
-	}
 }
diff --git a/src/core/lombok/eclipse/EclipseNode.java b/src/core/lombok/eclipse/EclipseNode.java
index d281b51..0d436be 100644
--- a/src/core/lombok/eclipse/EclipseNode.java
+++ b/src/core/lombok/eclipse/EclipseNode.java
@@ -50,7 +50,7 @@ public class EclipseNode extends lombok.core.LombokNode<EclipseAST, EclipseNode,
 	 * Visits this node and all child nodes depth-first, calling the provided visitor's visit methods.
 	 */
 	public void traverse(EclipseASTVisitor visitor) {
-		if (!this.isCompleteParse() && visitor.deferUntilPostDiet()) return;
+		if (!this.isCompleteParse() && visitor.getClass().isAnnotationPresent(DeferUntilPostDiet.class)) return;
 		
 		switch (getKind()) {
 		case COMPILATION_UNIT:
diff --git a/src/core/lombok/eclipse/HandlerLibrary.java b/src/core/lombok/eclipse/HandlerLibrary.java
index f3d5568..836aa22 100644
--- a/src/core/lombok/eclipse/HandlerLibrary.java
+++ b/src/core/lombok/eclipse/HandlerLibrary.java
@@ -80,7 +80,7 @@ public class HandlerLibrary {
 		}
 		
 		public boolean deferUntilPostDiet() {
-			return handler.deferUntilPostDiet();
+			return handler.getClass().isAnnotationPresent(DeferUntilPostDiet.class);
 		}
 	}
 	
diff --git a/src/core/lombok/eclipse/TransformEclipseAST.java b/src/core/lombok/eclipse/TransformEclipseAST.java
index c91299b..bc86875 100644
--- a/src/core/lombok/eclipse/TransformEclipseAST.java
+++ b/src/core/lombok/eclipse/TransformEclipseAST.java
@@ -175,10 +175,6 @@ public class TransformEclipseAST {
 			this.skipPrintAst = skipAllButPrintAST;
 		}
 		
-		public boolean deferUntilPostDiet() {
-			return false;
-		}
-		
 		@Override public void visitAnnotationOnField(FieldDeclaration field, EclipseNode annotationNode, Annotation annotation) {
 			CompilationUnitDeclaration top = (CompilationUnitDeclaration) annotationNode.top().get();
 			handlers.handleAnnotation(top, annotationNode, annotation, skipPrintAst);
diff --git a/src/core/lombok/eclipse/handlers/HandlePrintAST.java b/src/core/lombok/eclipse/handlers/HandlePrintAST.java
index 95db4e1..2a90b1c 100644
--- a/src/core/lombok/eclipse/handlers/HandlePrintAST.java
+++ b/src/core/lombok/eclipse/handlers/HandlePrintAST.java
@@ -31,6 +31,7 @@ import org.mangosdk.spi.ProviderFor;
 import lombok.Lombok;
 import lombok.core.AnnotationValues;
 import lombok.core.PrintAST;
+import lombok.eclipse.DeferUntilPostDiet;
 import lombok.eclipse.EclipseASTVisitor;
 import lombok.eclipse.EclipseAnnotationHandler;
 import lombok.eclipse.EclipseNode;
@@ -39,11 +40,9 @@ import lombok.eclipse.EclipseNode;
  * Handles the {@code lombok.core.PrintAST} annotation for eclipse.
  */
 @ProviderFor(EclipseAnnotationHandler.class)
+@DeferUntilPostDiet
 public class HandlePrintAST extends EclipseAnnotationHandler<PrintAST> {
-	@Override public boolean deferUntilPostDiet() {
-		return true;
-	}
-	
+
 	public void handle(AnnotationValues<PrintAST> annotation, Annotation ast, EclipseNode annotationNode) {
 		PrintStream stream = System.out;
 		String fileName = annotation.getInstance().outfile();
diff --git a/src/core/lombok/eclipse/handlers/HandleSneakyThrows.java b/src/core/lombok/eclipse/handlers/HandleSneakyThrows.java
index 95c11c2..0147ea9 100644
--- a/src/core/lombok/eclipse/handlers/HandleSneakyThrows.java
+++ b/src/core/lombok/eclipse/handlers/HandleSneakyThrows.java
@@ -28,6 +28,7 @@ import java.util.List;
 
 import lombok.SneakyThrows;
 import lombok.core.AnnotationValues;
+import lombok.eclipse.DeferUntilPostDiet;
 import lombok.eclipse.Eclipse;
 import lombok.eclipse.EclipseAnnotationHandler;
 import lombok.eclipse.EclipseNode;
@@ -55,6 +56,7 @@ import org.mangosdk.spi.ProviderFor;
  * Handles the {@code lombok.HandleSneakyThrows} annotation for eclipse.
  */
 @ProviderFor(EclipseAnnotationHandler.class)
+@DeferUntilPostDiet
 public class HandleSneakyThrows extends EclipseAnnotationHandler<SneakyThrows> {
 	
 	private static class DeclaredException {
@@ -66,11 +68,7 @@ public class HandleSneakyThrows extends EclipseAnnotationHandler<SneakyThrows> {
 			this.node = node;
 		}
 	}
-	
-	@Override public boolean deferUntilPostDiet() {
-		return true;
-	}
-	
+
 	@Override public void handle(AnnotationValues<SneakyThrows> annotation, Annotation source, EclipseNode annotationNode) {
 		List<String> exceptionNames = annotation.getRawExpressions("value");
 		List<DeclaredException> exceptions = new ArrayList<DeclaredException>();
diff --git a/src/core/lombok/eclipse/handlers/HandleSynchronized.java b/src/core/lombok/eclipse/handlers/HandleSynchronized.java
index ce1ac31..74bee70 100644
--- a/src/core/lombok/eclipse/handlers/HandleSynchronized.java
+++ b/src/core/lombok/eclipse/handlers/HandleSynchronized.java
@@ -28,6 +28,7 @@ import java.lang.reflect.Modifier;
 import lombok.Synchronized;
 import lombok.core.AnnotationValues;
 import lombok.core.AST.Kind;
+import lombok.eclipse.DeferUntilPostDiet;
 import lombok.eclipse.Eclipse;
 import lombok.eclipse.EclipseAnnotationHandler;
 import lombok.eclipse.EclipseNode;
@@ -52,14 +53,11 @@ import org.mangosdk.spi.ProviderFor;
  * Handles the {@code lombok.Synchronized} annotation for eclipse.
  */
 @ProviderFor(EclipseAnnotationHandler.class)
+@DeferUntilPostDiet
 public class HandleSynchronized extends EclipseAnnotationHandler<Synchronized> {
 	private static final char[] INSTANCE_LOCK_NAME = "$lock".toCharArray();
 	private static final char[] STATIC_LOCK_NAME = "$LOCK".toCharArray();
-	
-	@Override public boolean deferUntilPostDiet() {
-		return true;
-	}
-	
+
 	@Override public void preHandle(AnnotationValues<Synchronized> annotation, Annotation source, EclipseNode annotationNode) {
 		EclipseNode methodNode = annotationNode.up();
 		if (methodNode == null || methodNode.getKind() != Kind.METHOD || !(methodNode.get() instanceof MethodDeclaration)) return;
diff --git a/src/core/lombok/eclipse/handlers/HandleVal.java b/src/core/lombok/eclipse/handlers/HandleVal.java
index cca5d69..16c6b16 100644
--- a/src/core/lombok/eclipse/handlers/HandleVal.java
+++ b/src/core/lombok/eclipse/handlers/HandleVal.java
@@ -22,6 +22,7 @@
 package lombok.eclipse.handlers;
 
 import lombok.val;
+import lombok.eclipse.DeferUntilPostDiet;
 import lombok.eclipse.Eclipse;
 import lombok.eclipse.EclipseASTAdapter;
 import lombok.eclipse.EclipseASTVisitor;
@@ -36,10 +37,8 @@ import org.mangosdk.spi.ProviderFor;
  * This class just handles 2 basic error cases. The real meat of eclipse 'val' support is in {@code EclipsePatcher}'s {@code patchHandleVal} method.
  */
 @ProviderFor(EclipseASTVisitor.class)
+@DeferUntilPostDiet
 public class HandleVal extends EclipseASTAdapter {
-	@Override public boolean deferUntilPostDiet() {
-		return false;
-	}
 	
 	@Override public void visitLocal(EclipseNode localNode, LocalDeclaration local) {
 		if (!Eclipse.typeMatches(val.class, localNode, local.type)) return;
diff --git a/src/core/lombok/javac/HandlerLibrary.java b/src/core/lombok/javac/HandlerLibrary.java
index 6bfe3fd..a92aa2f 100644
--- a/src/core/lombok/javac/HandlerLibrary.java
+++ b/src/core/lombok/javac/HandlerLibrary.java
@@ -73,7 +73,7 @@ public class HandlerLibrary {
 		}
 		
 		public boolean isResolutionBased() {
-			return handler.isResolutionBased();
+			return handler.getClass().isAnnotationPresent(ResolutionBased.class);
 		}
 		
 		public void handle(final JavacNode node) {
@@ -204,8 +204,9 @@ public class HandlerLibrary {
 	 */
 	public void callASTVisitors(JavacAST ast) {
 		for (JavacASTVisitor visitor : visitorHandlers) try {
-			if (!visitor.isResolutionBased() && phase == 0) ast.traverse(visitor);
-			if (visitor.isResolutionBased() && phase == 1) ast.traverse(visitor);
+			boolean isResolutionBased = visitor.getClass().isAnnotationPresent(ResolutionBased.class);
+			if (!isResolutionBased && phase == 0) ast.traverse(visitor);
+			if (isResolutionBased && phase == 1) ast.traverse(visitor);
 		} catch (Throwable t) {
 			javacError(String.format("Lombok visitor handler %s failed", visitor.getClass()), t);
 		}
diff --git a/src/core/lombok/javac/JavacASTAdapter.java b/src/core/lombok/javac/JavacASTAdapter.java
index cb8f04b..4ba0cbb 100644
--- a/src/core/lombok/javac/JavacASTAdapter.java
+++ b/src/core/lombok/javac/JavacASTAdapter.java
@@ -34,11 +34,7 @@ import com.sun.tools.javac.tree.JCTree.JCVariableDecl;
  * has been implemented with an empty body. Override whichever methods you need.
  */
 public class JavacASTAdapter implements JavacASTVisitor {
-	/** {@inheritDoc} */
-	@Override public boolean isResolutionBased() {
-		return false;
-	}
-	
+
 	/** {@inheritDoc} */
 	@Override public void visitCompilationUnit(JavacNode top, JCCompilationUnit unit) {}
 	
diff --git a/src/core/lombok/javac/JavacASTVisitor.java b/src/core/lombok/javac/JavacASTVisitor.java
index 1837603..c4ddd23 100644
--- a/src/core/lombok/javac/JavacASTVisitor.java
+++ b/src/core/lombok/javac/JavacASTVisitor.java
@@ -37,12 +37,7 @@ import com.sun.tools.javac.tree.JCTree.JCVariableDecl;
  * calling the appropriate visit and endVisit methods.
  */
 public interface JavacASTVisitor {
-	/**
-	 * If true, you'll be called after all the non-resolution based visitors.
-	 * NB: Temporary solution - will be rewritten to a different style altogether in a future release.
-	 */
-	boolean isResolutionBased();
-	
+
 	/**
 	 * Called at the very beginning and end.
 	 */
@@ -107,10 +102,6 @@ public interface JavacASTVisitor {
 		private int disablePrinting = 0;
 		private int indent = 0;
 		
-		@Override public boolean isResolutionBased() {
-			return false;
-		}
-		
 		/**
 		 * @param printContent if true, bodies are printed directly, as java code,
 		 * instead of a tree listing of every AST node inside it.
diff --git a/src/core/lombok/javac/JavacAnnotationHandler.java b/src/core/lombok/javac/JavacAnnotationHandler.java
index 57180d2..1f7023f 100644
--- a/src/core/lombok/javac/JavacAnnotationHandler.java
+++ b/src/core/lombok/javac/JavacAnnotationHandler.java
@@ -53,11 +53,4 @@ public abstract class JavacAnnotationHandler<T extends Annotation> {
 	 * as access useful methods such as generating warnings or errors focused on the annotation.
 	 */
 	public abstract void handle(AnnotationValues<T> annotation, JCAnnotation ast, JavacNode annotationNode);
-	
-	/**
-	 * Return true if this handler requires resolution.
-	 */
-	public boolean isResolutionBased() {
-		return false;
-	}
 }
diff --git a/src/core/lombok/javac/ResolutionBased.java b/src/core/lombok/javac/ResolutionBased.java
new file mode 100644
index 0000000..3ee6beb
--- /dev/null
+++ b/src/core/lombok/javac/ResolutionBased.java
@@ -0,0 +1,11 @@
+package lombok.javac;
+
+import java.lang.annotation.ElementType;
+import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
+
+@Target(ElementType.TYPE)
+@Retention(RetentionPolicy.RUNTIME)
+public @interface ResolutionBased {
+}
\ No newline at end of file
diff --git a/src/core/lombok/javac/handlers/HandleDelegate.java b/src/core/lombok/javac/handlers/HandleDelegate.java
index 0294171..7a8116e 100644
--- a/src/core/lombok/javac/handlers/HandleDelegate.java
+++ b/src/core/lombok/javac/handlers/HandleDelegate.java
@@ -48,6 +48,7 @@ import lombok.javac.JavacAnnotationHandler;
 import lombok.javac.JavacNode;
 import lombok.javac.JavacResolution;
 import lombok.javac.JavacResolution.TypeNotConvertibleException;
+import lombok.javac.ResolutionBased;
 
 import org.mangosdk.spi.ProviderFor;
 
@@ -74,11 +75,9 @@ import com.sun.tools.javac.util.ListBuffer;
 import com.sun.tools.javac.util.Name;
 
 @ProviderFor(JavacAnnotationHandler.class)
+@ResolutionBased
 public class HandleDelegate extends JavacAnnotationHandler<Delegate> {
-	@Override public boolean isResolutionBased() {
-		return true;
-	}
-	
+
 	private static final List<String> METHODS_IN_OBJECT = Collections.unmodifiableList(Arrays.asList(
 			"hashCode()",
 			"canEqual(java.lang.Object)",  //Not in j.l.Object, but it goes with hashCode and equals so if we ignore those two, we should ignore this one.
diff --git a/src/core/lombok/javac/handlers/HandleVal.java b/src/core/lombok/javac/handlers/HandleVal.java
index bc70899..c545738 100644
--- a/src/core/lombok/javac/handlers/HandleVal.java
+++ b/src/core/lombok/javac/handlers/HandleVal.java
@@ -27,6 +27,7 @@ import lombok.javac.JavacASTAdapter;
 import lombok.javac.JavacASTVisitor;
 import lombok.javac.JavacNode;
 import lombok.javac.JavacResolution;
+import lombok.javac.ResolutionBased;
 
 import org.mangosdk.spi.ProviderFor;
 
@@ -41,11 +42,9 @@ import com.sun.tools.javac.tree.JCTree.JCVariableDecl;
 import com.sun.tools.javac.util.List;
 
 @ProviderFor(JavacASTVisitor.class)
+@ResolutionBased
 public class HandleVal extends JavacASTAdapter {
-	@Override public boolean isResolutionBased() {
-		return true;
-	}
-	
+
 	@Override public void visitLocal(JavacNode localNode, JCVariableDecl local) {
 		if (local.vartype == null || (!local.vartype.toString().equals("val") && !local.vartype.toString().equals("lombok.val"))) return;
 		
-- 
1.7.0.2.msysgit.0


a2ece7d649a952c7668839f1d6510fa0b113c0a9
 .../lombok/eclipse/handlers/HandleCleanup.java     |  129 ++++++++++++++------ 
 src/core/lombok/javac/handlers/HandleCleanup.java  |   39 +++++--
 .../resource/after-delombok/CleanupPlain.java      |    4 +-
 .../transform/resource/after-ecj/CleanupPlain.java |    6 +-
 .../resource/after-eclipse/CleanupPlain.java       |    6 +-
 test/transform/resource/before/CleanupPlain.java   |    2 +-
 7 files changed, 129 insertions(+), 58 deletions(-)

diff --git a/src/core/lombok/eclipse/handlers/HandleCleanup.java b/src/core/lombok/eclipse/handlers/HandleCleanup.java
index cbf84e8..296e854 100644
--- a/src/core/lombok/eclipse/handlers/HandleCleanup.java
+++ b/src/core/lombok/eclipse/handlers/HandleCleanup.java
@@ -28,6 +28,7 @@ import java.util.Arrays;
 import lombok.Cleanup;
 import lombok.core.AnnotationValues;
 import lombok.core.AST.Kind;
+import lombok.eclipse.Eclipse;
 import lombok.eclipse.EclipseAnnotationHandler;
 import lombok.eclipse.EclipseNode;
 
@@ -41,15 +42,19 @@ import org.eclipse.jdt.internal.compiler.ast.CastExpression;
 import org.eclipse.jdt.internal.compiler.ast.EqualExpression;
 import org.eclipse.jdt.internal.compiler.ast.Expression;
 import org.eclipse.jdt.internal.compiler.ast.IfStatement;
+import org.eclipse.jdt.internal.compiler.ast.InstanceOfExpression;
 import org.eclipse.jdt.internal.compiler.ast.LocalDeclaration;
 import org.eclipse.jdt.internal.compiler.ast.MemberValuePair;
 import org.eclipse.jdt.internal.compiler.ast.MessageSend;
 import org.eclipse.jdt.internal.compiler.ast.NullLiteral;
 import org.eclipse.jdt.internal.compiler.ast.OperatorIds;
+import org.eclipse.jdt.internal.compiler.ast.QualifiedTypeReference;
 import org.eclipse.jdt.internal.compiler.ast.SingleNameReference;
+import org.eclipse.jdt.internal.compiler.ast.SingleTypeReference;
 import org.eclipse.jdt.internal.compiler.ast.Statement;
 import org.eclipse.jdt.internal.compiler.ast.SwitchStatement;
 import org.eclipse.jdt.internal.compiler.ast.TryStatement;
+import org.eclipse.jdt.internal.compiler.ast.TypeReference;
 import org.mangosdk.spi.ProviderFor;
 
 /**
@@ -122,6 +127,9 @@ public class HandleCleanup extends EclipseAnnotationHandler<Cleanup> {
 			}
 		} else end = statements.length;
 		
+		int pS = ast.sourceStart, pE = ast.sourceEnd;
+		long p = (long)pS << 32 | pE;
+		
 		//At this point:
 		//  start-1 = Local Declaration marked with @Cleanup
 		//  start = first instruction that needs to be wrapped into a try block
@@ -161,46 +169,80 @@ public class HandleCleanup extends EclipseAnnotationHandler<Cleanup> {
 		newStatements[start] = tryStatement;
 		
 		Statement[] finallyBlock = new Statement[1];
-		MessageSend unsafeClose = new MessageSend();
-		setGeneratedBy(unsafeClose, ast);
-		unsafeClose.sourceStart = ast.sourceStart;
-		unsafeClose.sourceEnd = ast.sourceEnd;
-		SingleNameReference receiver = new SingleNameReference(decl.name, 0);
-		setGeneratedBy(receiver, ast);
-		unsafeClose.receiver = receiver;
-		long nameSourcePosition = (long)ast.sourceStart << 32 | ast.sourceEnd;
-		if (ast.memberValuePairs() != null) for (MemberValuePair pair : ast.memberValuePairs()) {
-			if (pair.name != null && new String(pair.name).equals("value")) {
-				nameSourcePosition = (long)pair.value.sourceStart << 32 | pair.value.sourceEnd;
-				break;
+		
+		if ("close".equals(cleanupName) && !annotation.isExplicit("value")) {
+			SingleNameReference varName = new SingleNameReference(decl.name, p);
+			setGeneratedBy(varName, ast);
+			final CastExpression castExpression = makeCastExpression(varName, generateQualifiedTypeRef(ast, "java".toCharArray(), "io".toCharArray(), "Closeable".toCharArray()), ast);
+			setGeneratedBy(castExpression, ast);
+			
+			MessageSend safeClose = new MessageSend();
+			setGeneratedBy(safeClose, ast);
+			safeClose.sourceStart = ast.sourceStart;
+			safeClose.sourceEnd = ast.sourceEnd;
+			safeClose.receiver = castExpression;
+			long nameSourcePosition = (long)ast.sourceStart << 32 | ast.sourceEnd;
+			if (ast.memberValuePairs() != null) for (MemberValuePair pair : ast.memberValuePairs()) {
+				if (pair.name != null && new String(pair.name).equals("value")) {
+					nameSourcePosition = (long)pair.value.sourceStart << 32 | pair.value.sourceEnd;
+					break;
+				}
 			}
+			safeClose.nameSourcePosition = nameSourcePosition;
+			safeClose.selector = cleanupName.toCharArray();
+			
+			varName = new SingleNameReference(decl.name, p);
+			setGeneratedBy(varName, ast);
+			final InstanceOfExpression isClosable = new InstanceOfExpression(varName, generateQualifiedTypeRef(ast, "java".toCharArray(), "io".toCharArray(), "Closeable".toCharArray()));
+			setGeneratedBy(isClosable, ast);
+			
+			Block closeBlock = new Block(0);
+			closeBlock.statements = new Statement[1];
+			closeBlock.statements[0] = safeClose;
+			setGeneratedBy(closeBlock, ast);
+			IfStatement ifStatement = new IfStatement(isClosable, closeBlock, 0, 0);
+			setGeneratedBy(ifStatement, ast);
+			
+			finallyBlock[0] = ifStatement;
+		} else {
+			MessageSend unsafeClose = new MessageSend();
+			setGeneratedBy(unsafeClose, ast);
+			unsafeClose.sourceStart = ast.sourceStart;
+			unsafeClose.sourceEnd = ast.sourceEnd;
+			SingleNameReference receiver = new SingleNameReference(decl.name, 0);
+			setGeneratedBy(receiver, ast);
+			unsafeClose.receiver = receiver;
+			long nameSourcePosition = (long)ast.sourceStart << 32 | ast.sourceEnd;
+			if (ast.memberValuePairs() != null) for (MemberValuePair pair : ast.memberValuePairs()) {
+				if (pair.name != null && new String(pair.name).equals("value")) {
+					nameSourcePosition = (long)pair.value.sourceStart << 32 | pair.value.sourceEnd;
+					break;
+				}
+			}
+			unsafeClose.nameSourcePosition = nameSourcePosition;
+			unsafeClose.selector = cleanupName.toCharArray();
+			
+			SingleNameReference varName = new SingleNameReference(decl.name, p);
+			setGeneratedBy(varName, ast);
+			NullLiteral nullLiteral = new NullLiteral(pS, pE);
+			setGeneratedBy(nullLiteral, ast);
+			
+			MessageSend preventNullAnalysis = preventNullAnalysis(ast, varName);
+			
+			EqualExpression equalExpression = new EqualExpression(preventNullAnalysis, nullLiteral, OperatorIds.NOT_EQUAL);
+			equalExpression.sourceStart = pS; equalExpression.sourceEnd = pE;
+			setGeneratedBy(equalExpression, ast);
+			
+			Block closeBlock = new Block(0);
+			closeBlock.statements = new Statement[1];
+			closeBlock.statements[0] = unsafeClose;
+			setGeneratedBy(closeBlock, ast);
+			IfStatement ifStatement = new IfStatement(equalExpression, closeBlock, 0, 0);
+			setGeneratedBy(ifStatement, ast);
+			
+			finallyBlock[0] = ifStatement;
 		}
-		unsafeClose.nameSourcePosition = nameSourcePosition;
-		unsafeClose.selector = cleanupName.toCharArray();
-		
 		
-		int pS = ast.sourceStart, pE = ast.sourceEnd;
-		long p = (long)pS << 32 | pE;
-
-		SingleNameReference varName = new SingleNameReference(decl.name, p);
-		setGeneratedBy(varName, ast);
-		NullLiteral nullLiteral = new NullLiteral(pS, pE);
-		setGeneratedBy(nullLiteral, ast);
-		
-		MessageSend preventNullAnalysis = preventNullAnalysis(ast, varName);
-		
-		EqualExpression equalExpression = new EqualExpression(preventNullAnalysis, nullLiteral, OperatorIds.NOT_EQUAL);
-		equalExpression.sourceStart = pS; equalExpression.sourceEnd = pE;
-		setGeneratedBy(equalExpression, ast);
-		
-		Block closeBlock = new Block(0);
-		closeBlock.statements = new Statement[1];
-		closeBlock.statements[0] = unsafeClose;
-		setGeneratedBy(closeBlock, ast);
-		IfStatement ifStatement = new IfStatement(equalExpression, closeBlock, 0, 0);
-		setGeneratedBy(ifStatement, ast);
-		
-		finallyBlock[0] = ifStatement;
 		tryStatement.finallyBlock = new Block(0);
 		
 		// Positions for in-method generated nodes are special
@@ -254,6 +296,19 @@ public class HandleCleanup extends EclipseAnnotationHandler<Cleanup> {
 		return preventNullAnalysis;
 	}
 	
+	private TypeReference generateQualifiedTypeRef(ASTNode source, char[]... varNames) {
+		int pS = source.sourceStart, pE = source.sourceEnd;
+		long p = (long)pS << 32 | pE;
+		
+		TypeReference ref;
+		
+		long[] poss = Eclipse.poss(source, varNames.length);
+		if (varNames.length > 1) ref = new QualifiedTypeReference(varNames, poss);
+		else ref = new SingleTypeReference(varNames[0], p);
+		setGeneratedBy(ref, source);
+		return ref;
+	}
+	
 	private void doAssignmentCheck(EclipseNode node, Statement[] tryBlock, char[] varName) {
 		for (Statement statement : tryBlock) doAssignmentCheck0(node, statement, varName);
 	}
diff --git a/src/core/lombok/javac/handlers/HandleCleanup.java b/src/core/lombok/javac/handlers/HandleCleanup.java
index fc74e31..b6534b3 100644
--- a/src/core/lombok/javac/handlers/HandleCleanup.java
+++ b/src/core/lombok/javac/handlers/HandleCleanup.java
@@ -22,12 +22,14 @@
 package lombok.javac.handlers;
 
 import static lombok.javac.handlers.JavacHandlerUtil.*;
+
 import lombok.Cleanup;
 import lombok.core.AnnotationValues;
 import lombok.core.AST.Kind;
 import lombok.javac.Javac;
 import lombok.javac.JavacAnnotationHandler;
 import lombok.javac.JavacNode;
+import lombok.javac.ResolutionBased;
 
 import org.mangosdk.spi.ProviderFor;
 
@@ -45,6 +47,7 @@ import com.sun.tools.javac.tree.JCTree.JCExpressionStatement;
 import com.sun.tools.javac.tree.JCTree.JCFieldAccess;
 import com.sun.tools.javac.tree.JCTree.JCIdent;
 import com.sun.tools.javac.tree.JCTree.JCIf;
+import com.sun.tools.javac.tree.JCTree.JCInstanceOf;
 import com.sun.tools.javac.tree.JCTree.JCMethodDecl;
 import com.sun.tools.javac.tree.JCTree.JCMethodInvocation;
 import com.sun.tools.javac.tree.JCTree.JCStatement;
@@ -58,6 +61,7 @@ import com.sun.tools.javac.util.Name;
  * Handles the {@code lombok.Cleanup} annotation for javac.
  */
 @ProviderFor(JavacAnnotationHandler.class)
+@ResolutionBased
 public class HandleCleanup extends JavacAnnotationHandler<Cleanup> {
 	@Override public void handle(AnnotationValues<Cleanup> annotation, JCAnnotation ast, JavacNode annotationNode) {
 		deleteAnnotationIfNeccessary(annotationNode, Cleanup.class);
@@ -113,16 +117,30 @@ public class HandleCleanup extends JavacAnnotationHandler<Cleanup> {
 		doAssignmentCheck(annotationNode, tryBlock.toList(), decl.name);
 		
 		TreeMaker maker = annotationNode.getTreeMaker();
-		JCFieldAccess cleanupMethod = maker.Select(maker.Ident(decl.name), annotationNode.toName(cleanupName));
-		List<JCStatement> cleanupCall = List.<JCStatement>of(maker.Exec(
-				maker.Apply(List.<JCExpression>nil(), cleanupMethod, List.<JCExpression>nil())));
-		
-		JCMethodInvocation preventNullAnalysis = preventNullAnalysis(maker, annotationNode, maker.Ident(decl.name));
-		JCBinary isNull = maker.Binary(Javac.getCtcInt(JCTree.class, "NE"), preventNullAnalysis, maker.Literal(Javac.getCtcInt(TypeTags.class, "BOT"), null));
-		
-		JCIf ifNotNullCleanup = maker.If(isNull, maker.Block(0, cleanupCall), null);
+		JCBlock finalizer;
 		
-		JCBlock finalizer = recursiveSetGeneratedBy(maker.Block(0, List.<JCStatement>of(ifNotNullCleanup)), ast);
+		if ("close".equals(cleanupName) && !annotation.isExplicit("value")) {
+			JCFieldAccess cleanupMethod = maker.Select(maker.TypeCast(chainDotsString(annotationNode, "java.io.Closeable"), maker.Ident(decl.name)), annotationNode.toName(cleanupName));
+			List<JCStatement> cleanupCall = List.<JCStatement>of(maker.Exec(
+					maker.Apply(List.<JCExpression>nil(), cleanupMethod, List.<JCExpression>nil())));
+			
+			JCInstanceOf isClosable = maker.TypeTest(maker.Ident(decl.name), chainDotsString(annotationNode, "java.io.Closeable"));
+			
+			JCIf ifIsClosableCleanup = maker.If(isClosable, maker.Block(0, cleanupCall), null);
+			
+			finalizer = recursiveSetGeneratedBy(maker.Block(0, List.<JCStatement>of(ifIsClosableCleanup)), ast);
+		} else {
+			JCFieldAccess cleanupMethod = maker.Select(maker.Ident(decl.name), annotationNode.toName(cleanupName));
+			List<JCStatement> cleanupCall = List.<JCStatement>of(maker.Exec(
+					maker.Apply(List.<JCExpression>nil(), cleanupMethod, List.<JCExpression>nil())));
+			
+			JCMethodInvocation preventNullAnalysis = preventNullAnalysis(maker, annotationNode, maker.Ident(decl.name));
+			JCBinary isNull = maker.Binary(Javac.getCtcInt(JCTree.class, "NE"), preventNullAnalysis, maker.Literal(Javac.getCtcInt(TypeTags.class, "BOT"), null));
+			
+			JCIf ifNotNullCleanup = maker.If(isNull, maker.Block(0, cleanupCall), null);
+			
+			finalizer = recursiveSetGeneratedBy(maker.Block(0, List.<JCStatement>of(ifNotNullCleanup)), ast);
+		}
 		
 		newStatements.append(setGeneratedBy(maker.Try(setGeneratedBy(maker.Block(0, tryBlock.toList()), ast), List.<JCCatch>nil(), finalizer), ast));
 		
@@ -149,8 +167,7 @@ public class HandleCleanup extends JavacAnnotationHandler<Cleanup> {
 	
 	private void doAssignmentCheck0(JavacNode node, JCTree statement, Name name) {
 		if (statement instanceof JCAssign) doAssignmentCheck0(node, ((JCAssign)statement).rhs, name);
-		if (statement instanceof JCExpressionStatement) doAssignmentCheck0(node,
-				((JCExpressionStatement)statement).expr, name);
+		if (statement instanceof JCExpressionStatement) doAssignmentCheck0(node, ((JCExpressionStatement)statement).expr, name);
 		if (statement instanceof JCVariableDecl) doAssignmentCheck0(node, ((JCVariableDecl)statement).init, name);
 		if (statement instanceof JCTypeCast) doAssignmentCheck0(node, ((JCTypeCast)statement).expr, name);
 		if (statement instanceof JCIdent) {
diff --git a/test/transform/resource/after-delombok/CleanupPlain.java b/test/transform/resource/after-delombok/CleanupPlain.java
index f91f35e..2faf499 100644
--- a/test/transform/resource/after-delombok/CleanupPlain.java
+++ b/test/transform/resource/after-delombok/CleanupPlain.java
@@ -14,8 +14,8 @@ class CleanupPlain {
 				}
 			}
 		} finally {
-			if (java.util.Collections.singletonList(in).get(0) != null) {
-				in.close();
+			if (in instanceof java.io.Closeable) {
+				((java.io.Closeable)in).close();
 			}
 		}
 	}
diff --git a/test/transform/resource/after-ecj/CleanupPlain.java b/test/transform/resource/after-ecj/CleanupPlain.java
index a9b9ece..6da031c 100644
--- a/test/transform/resource/after-ecj/CleanupPlain.java
+++ b/test/transform/resource/after-ecj/CleanupPlain.java
@@ -8,7 +8,7 @@ class CleanupPlain {
     @lombok.Cleanup InputStream in = new FileInputStream("in");
     try 
       {
-        @Cleanup OutputStream out = new FileOutputStream("out");
+        @Cleanup("close") OutputStream out = new FileOutputStream("out");
         try 
           {
             if (in.markSupported())
@@ -26,9 +26,9 @@ class CleanupPlain {
       }
     finally
       {
-        if ((java.util.Collections.singletonList(in).get(0) != null))
+        if ((in instanceof java.io.Closeable))
             {
-              in.close();
+              (java.io.Closeable) in.close();
             }
       }
   }
diff --git a/test/transform/resource/after-eclipse/CleanupPlain.java b/test/transform/resource/after-eclipse/CleanupPlain.java
index a9b9ece..6da031c 100644
--- a/test/transform/resource/after-eclipse/CleanupPlain.java
+++ b/test/transform/resource/after-eclipse/CleanupPlain.java
@@ -8,7 +8,7 @@ class CleanupPlain {
     @lombok.Cleanup InputStream in = new FileInputStream("in");
     try 
       {
-        @Cleanup OutputStream out = new FileOutputStream("out");
+        @Cleanup("close") OutputStream out = new FileOutputStream("out");
         try 
           {
             if (in.markSupported())
@@ -26,9 +26,9 @@ class CleanupPlain {
       }
     finally
       {
-        if ((java.util.Collections.singletonList(in).get(0) != null))
+        if ((in instanceof java.io.Closeable))
             {
-              in.close();
+              (java.io.Closeable) in.close();
             }
       }
   }
diff --git a/test/transform/resource/before/CleanupPlain.java b/test/transform/resource/before/CleanupPlain.java
index a91ac3c..f031aa3 100644
--- a/test/transform/resource/before/CleanupPlain.java
+++ b/test/transform/resource/before/CleanupPlain.java
@@ -3,7 +3,7 @@ import java.io.*;
 class CleanupPlain {
 	void test() throws Exception {
 		@lombok.Cleanup InputStream in = new FileInputStream("in");
-		@Cleanup OutputStream out = new FileOutputStream("out");
+		@Cleanup("close") OutputStream out = new FileOutputStream("out");
 		if (in.markSupported()) {
 			out.flush();
 		}

c71c1e85bf1c94a0c1a1e013d816cb2789c945dd
 .../eclipse/handlers/EclipseHandlerUtil.java       |    7 +++--
 src/core/lombok/eclipse/handlers/HandleGetter.java |   19 ++++++++------
 .../lombok/eclipse/agent/EclipsePatcher.java       |   25 +++++++++++++++++++-
 .../lombok/eclipse/agent/PatchFixes.java           |    8 +++++-
 4 files changed, 46 insertions(+), 13 deletions(-)

diff --git a/src/core/lombok/eclipse/handlers/EclipseHandlerUtil.java b/src/core/lombok/eclipse/handlers/EclipseHandlerUtil.java
index 96dea22..5130c7d 100644
--- a/src/core/lombok/eclipse/handlers/EclipseHandlerUtil.java
+++ b/src/core/lombok/eclipse/handlers/EclipseHandlerUtil.java
@@ -848,7 +848,7 @@ public class EclipseHandlerUtil {
 		
 		MessageSend call = new MessageSend();
 		setGeneratedBy(call, source);
-		call.sourceStart = pS; call.sourceEnd = pE;
+		call.sourceStart = pS; call.statementEnd = call.sourceEnd = pE;
 		call.receiver = new ThisReference(pS, pE);
 		setGeneratedBy(call.receiver, source);
 		call.selector = getter.name;
@@ -878,7 +878,7 @@ public class EclipseHandlerUtil {
 		
 		MessageSend call = new MessageSend();
 		setGeneratedBy(call, source);
-		call.sourceStart = pS; call.sourceEnd = pE;
+		call.sourceStart = pS; call.statementEnd = call.sourceEnd = pE;
 		call.receiver = new SingleNameReference(receiver, p);
 		setGeneratedBy(call.receiver, source);
 		call.selector = getter.name;
@@ -1136,7 +1136,7 @@ public class EclipseHandlerUtil {
 		NullLiteral nullLiteral = new NullLiteral(pS, pE);
 		setGeneratedBy(nullLiteral, source);
 		EqualExpression equalExpression = new EqualExpression(varName, nullLiteral, OperatorIds.EQUAL_EQUAL);
-		equalExpression.sourceStart = pS; equalExpression.sourceEnd = pE;
+		equalExpression.sourceStart = pS; equalExpression.statementEnd = equalExpression.sourceEnd = pE;
 		setGeneratedBy(equalExpression, source);
 		IfStatement ifStatement = new IfStatement(equalExpression, throwStatement, 0, 0);
 		setGeneratedBy(ifStatement, source);
@@ -1226,6 +1226,7 @@ public class EclipseHandlerUtil {
 		
 		result.sourceStart = source.sourceStart;
 		result.sourceEnd = source.sourceEnd;
+		result.statementEnd = source.sourceEnd;
 		
 		setGeneratedBy(result, source);
 		return result;
diff --git a/src/core/lombok/eclipse/handlers/HandleGetter.java b/src/core/lombok/eclipse/handlers/HandleGetter.java
index fa66d1a..f113ef6 100644
--- a/src/core/lombok/eclipse/handlers/HandleGetter.java
+++ b/src/core/lombok/eclipse/handlers/HandleGetter.java
@@ -305,12 +305,12 @@ public class HandleGetter extends EclipseAnnotationHandler<Getter> {
 			TypeReference[][] typeParams = AR_PARAMS.clone();
 			typeParams[4] = new TypeReference[] {copyType(componentType, source)};
 			valueDecl.type = new ParameterizedQualifiedTypeReference(AR, typeParams, 0, poss(source, 5));
-			valueDecl.type.sourceStart = pS; valueDecl.type.sourceEnd = pE;
+			valueDecl.type.sourceStart = pS; valueDecl.type.sourceEnd = valueDecl.type.statementEnd = pE;
 			setGeneratedBy(valueDecl.type, source);
 			
 			MessageSend getter = new MessageSend();
 			setGeneratedBy(getter, source);
-			getter.sourceStart = pS; getter.sourceEnd = pE;
+			getter.sourceStart = pS; getter.statementEnd = getter.sourceEnd = pE;
 			getter.selector = new char[] {'g', 'e', 't'};
 			getter.receiver = createFieldAccessor(fieldNode, FieldAccess.ALWAYS_FIELD, source);
 			
@@ -345,10 +345,11 @@ public class HandleGetter extends EclipseAnnotationHandler<Getter> {
 			/* value = this.fieldName.get(); */ {
 				MessageSend getter = new MessageSend();
 				setGeneratedBy(getter, source);
-				getter.sourceStart = pS; getter.sourceEnd = pE;
+				getter.sourceStart = pS; getter.sourceEnd = getter.statementEnd = pE;
 				getter.selector = new char[] {'g', 'e', 't'};
 				getter.receiver = createFieldAccessor(fieldNode, FieldAccess.ALWAYS_FIELD, source);
 				Assignment assign = new Assignment(new SingleNameReference(valueName, p), getter, pE);
+				assign.sourceStart = pS; assign.statementEnd = assign.sourceEnd = pE;
 				setGeneratedBy(assign, source);
 				setGeneratedBy(assign.lhs, source);
 				inner.statements[0] = assign;
@@ -366,14 +367,16 @@ public class HandleGetter extends EclipseAnnotationHandler<Getter> {
 				/*value = new java.util.concurrent.atomic.AtomicReference<ValueType>(new ValueType()); */ {
 					AllocationExpression create = new AllocationExpression();
 					setGeneratedBy(create, source);
-					create.sourceStart = pS; create.sourceEnd = pE;
+					create.sourceStart = pS; create.sourceEnd = create.statementEnd = pE;
 					TypeReference[][] typeParams = AR_PARAMS.clone();
 					typeParams[4] = new TypeReference[] {copyType(componentType, source)};
 					create.type = new ParameterizedQualifiedTypeReference(AR, typeParams, 0, poss(source, 5));
-					create.type.sourceStart = pS; create.type.sourceEnd = pE;
+					create.type.sourceStart = pS; create.type.sourceEnd = create.type.statementEnd = pE;
 					setGeneratedBy(create.type, source);
 					create.arguments = new Expression[] {field.initialization};
 					Assignment innerAssign = new Assignment(new SingleNameReference(valueName, p), create, pE);
+					innerAssign.sourceStart = pS; innerAssign.statementEnd = innerAssign.sourceEnd = pE;
+					
 					setGeneratedBy(innerAssign, source);
 					setGeneratedBy(innerAssign.lhs, source);
 					innerThen.statements[0] = innerAssign;
@@ -382,7 +385,7 @@ public class HandleGetter extends EclipseAnnotationHandler<Getter> {
 				/*this.fieldName.set(value);*/ {
 					MessageSend setter = new MessageSend();
 					setGeneratedBy(setter, source);
-					setter.sourceStart = pS; setter.sourceEnd = pE;
+					setter.sourceStart = pS; setter.sourceEnd = setter.statementEnd =  pE;
 					setter.receiver = createFieldAccessor(fieldNode, FieldAccess.ALWAYS_FIELD, source);
 					setter.selector = new char[] { 's', 'e', 't' };
 					setter.arguments = new Expression[] {
@@ -408,7 +411,7 @@ public class HandleGetter extends EclipseAnnotationHandler<Getter> {
 		/* return value.get(); */ {
 			MessageSend getter = new MessageSend();
 			setGeneratedBy(getter, source);
-			getter.sourceStart = pS; getter.sourceEnd = pE;
+			getter.sourceStart = pS; getter.sourceEnd = getter.statementEnd = pE;
 			getter.selector = new char[] {'g', 'e', 't'};
 			getter.receiver = new SingleNameReference(valueName, p);
 			setGeneratedBy(getter.receiver, source);
@@ -435,7 +438,7 @@ public class HandleGetter extends EclipseAnnotationHandler<Getter> {
 			field.type = type;
 			AllocationExpression init = new AllocationExpression();
 			// Some magic here
-			init.sourceStart = field.initialization.sourceStart; init.sourceEnd = field.initialization.sourceEnd;
+			init.sourceStart = field.initialization.sourceStart; init.sourceEnd = init.statementEnd = field.initialization.sourceEnd;
 			init.type = copyType(type, source);
 			field.initialization = init;
 		}
diff --git a/src/eclipseAgent/lombok/eclipse/agent/EclipsePatcher.java b/src/eclipseAgent/lombok/eclipse/agent/EclipsePatcher.java
index 517e6dd..504109a 100644
--- a/src/eclipseAgent/lombok/eclipse/agent/EclipsePatcher.java
+++ b/src/eclipseAgent/lombok/eclipse/agent/EclipsePatcher.java
@@ -92,6 +92,7 @@ public class EclipsePatcher extends Agent {
 			patchFixSourceTypeConverter(sm);
 			patchDisableLombokForCodeFormatterAndCleanup(sm);
 			patchListRewriteHandleGeneratedMethods(sm);
+			patchSyntaxAndOccurrencesHighlighting(sm);
 		} else {
 			patchPostCompileHookEcj(sm);
 		}
@@ -102,6 +103,20 @@ public class EclipsePatcher extends Agent {
 		if (reloadExistingClasses) sm.reloadClasses(instrumentation);
 	}
 	
+	private static void patchSyntaxAndOccurrencesHighlighting(ScriptManager sm) {
+		/*
+		 * Skip generated nodes for "visual effects" (syntax highlighting &&
+		 * highlight occurrences)
+		 */
+		sm.addScript(ScriptBuilder
+				.exitEarly()
+				.target(new MethodTarget("org.eclipse.jdt.internal.ui.search.OccurrencesFinder", "addUsage"))
+				.target(new MethodTarget("org.eclipse.jdt.internal.ui.search.OccurrencesFinder", "addWrite"))
+				.target(new MethodTarget("org.eclipse.jdt.internal.ui.javaeditor.SemanticHighlightingReconciler$PositionCollector", "visit", "boolean", "org.eclipse.jdt.core.dom.SimpleName"))
+				.decisionMethod(new Hook("lombok.eclipse.agent.PatchFixes", "isGenerated", "boolean", "org.eclipse.jdt.core.dom.ASTNode"))
+				.valueMethod(new Hook("lombok.eclipse.agent.PatchFixes", "returnFalse", "boolean", "java.lang.Object")).request(StackRequest.PARAM1).build());
+	}
+	
 	private static void patchDisableLombokForCodeFormatterAndCleanup(ScriptManager sm) {
 		sm.addScript(ScriptBuilder.setSymbolDuringMethodCall()
 				.target(new MethodTarget("org.eclipse.jdt.internal.formatter.DefaultCodeFormatter", "formatCompilationUnit"))
@@ -115,9 +130,17 @@ public class EclipsePatcher extends Agent {
 			.target(new MethodTarget("org.eclipse.jdt.internal.corext.fix.ControlStatementsFix$ControlStatementFinder", "visit", "boolean", "org.eclipse.jdt.core.dom.ForStatement"))
 			.target(new MethodTarget("org.eclipse.jdt.internal.corext.fix.ControlStatementsFix$ControlStatementFinder", "visit", "boolean", "org.eclipse.jdt.core.dom.IfStatement"))
 			.target(new MethodTarget("org.eclipse.jdt.internal.corext.fix.ControlStatementsFix$ControlStatementFinder", "visit", "boolean", "org.eclipse.jdt.core.dom.WhileStatement"))
+			.target(new MethodTarget("org.eclipse.jdt.internal.corext.fix.CodeStyleFix$ThisQualifierVisitor", "visit", "boolean", "org.eclipse.jdt.core.dom.MethodInvocation"))
+			.target(new MethodTarget("org.eclipse.jdt.internal.corext.fix.CodeStyleFix$ThisQualifierVisitor", "visit", "boolean", "org.eclipse.jdt.core.dom.FieldAccess"))
+			.target(new MethodTarget("org.eclipse.jdt.internal.corext.fix.CodeStyleFix$CodeStyleVisitor", "visit", "boolean", "org.eclipse.jdt.core.dom.MethodInvocation"))
+			.target(new MethodTarget("org.eclipse.jdt.internal.corext.fix.CodeStyleFix$CodeStyleVisitor", "visit", "boolean", "org.eclipse.jdt.core.dom.TypeDeclaration"))
+			.target(new MethodTarget("org.eclipse.jdt.internal.corext.fix.CodeStyleFix$CodeStyleVisitor", "visit", "boolean", "org.eclipse.jdt.core.dom.QualifiedName"))
+			.target(new MethodTarget("org.eclipse.jdt.internal.corext.fix.CodeStyleFix$CodeStyleVisitor", "visit", "boolean", "org.eclipse.jdt.core.dom.SimpleName"))
+			// if a generated node has children we can just ignore them as well;
 			.decisionMethod(new Hook("lombok.eclipse.agent.PatchFixes", "isGenerated", "boolean", "org.eclipse.jdt.core.dom.ASTNode"))
 			.request(StackRequest.PARAM1)
-			.valueMethod(new Hook("lombok.eclipse.agent.PatchFixes", "isGenerated", "boolean", "org.eclipse.jdt.core.dom.ASTNode"))
+			.valueMethod(new Hook("lombok.eclipse.agent.PatchFixes", "isGenerated", "boolean", "org.eclipse.jdt.core.dom.Statement"))
+			.valueMethod(new Hook("lombok.eclipse.agent.PatchFixes", "returnFalse", "boolean", "java.lang.Object"))
 			.build());
 	}
 	
diff --git a/src/eclipseAgent/lombok/eclipse/agent/PatchFixes.java b/src/eclipseAgent/lombok/eclipse/agent/PatchFixes.java
index 682eab2..640cafd 100644
--- a/src/eclipseAgent/lombok/eclipse/agent/PatchFixes.java
+++ b/src/eclipseAgent/lombok/eclipse/agent/PatchFixes.java
@@ -47,12 +47,18 @@ public class PatchFixes {
 		boolean result = false;
 		try {
 			result =  ((Boolean)node.getClass().getField("$isGenerated").get(node)).booleanValue();
+			if (!result && node.getParent() != null && node.getParent() instanceof org.eclipse.jdt.core.dom.QualifiedName)
+				result = isGenerated(node.getParent());
 		} catch (Exception e) {
 			// better to assume it isn't generated
 		}
 		return result;
 	}
-
+	
+	public static boolean returnFalse(java.lang.Object object) {
+		return false;
+	}
+	
 	public static int fixRetrieveStartingCatchPosition(int original, int start) {
 		return original == -1 ? start : original;
 	}

060230a0081b413166b1e08aaf7b6ff60d367000
 src/core/lombok/AllArgsConstructor.java            |    2 ++
 src/core/lombok/Data.java                          |    9 +++++++++
 src/core/lombok/NoArgsConstructor.java             |    2 ++
 src/core/lombok/RequiredArgsConstructor.java       |    2 ++
 src/core/lombok/eclipse/handlers/HandleData.java   |   11 ++++++++---
 .../eclipse/handlers/HandleEqualsAndHashCode.java  |    4 ++--
 .../lombok/eclipse/handlers/HandleToString.java    |    6 +++---
 src/core/lombok/javac/handlers/HandleData.java     |    9 ++++++---
 .../javac/handlers/HandleEqualsAndHashCode.java    |    4 ++--
 src/core/lombok/javac/handlers/HandleToString.java |    4 ++--
 10 files changed, 38 insertions(+), 15 deletions(-)

diff --git a/src/core/lombok/AllArgsConstructor.java b/src/core/lombok/AllArgsConstructor.java
index 7e55e4d..778980e 100644
--- a/src/core/lombok/AllArgsConstructor.java
+++ b/src/core/lombok/AllArgsConstructor.java
@@ -44,6 +44,8 @@ public @interface AllArgsConstructor {
 	 */
 	String staticName() default "";
 	
+	boolean callSuper() default false;
+	
 	/**
 	 * Sets the access level of the constructor. By default, generated constructors are {@code public}.
 	 */
diff --git a/src/core/lombok/Data.java b/src/core/lombok/Data.java
index 5902950..bdbbc4f 100644
--- a/src/core/lombok/Data.java
+++ b/src/core/lombok/Data.java
@@ -45,6 +45,7 @@ import java.lang.annotation.Target;
 @Target(ElementType.TYPE)
 @Retention(RetentionPolicy.SOURCE)
 public @interface Data {
+	
 	/**
 	 * If you specify a static constructor name, then the generated constructor will be private, and
 	 * instead a static factory method is created that other classes can use to create instances.
@@ -57,4 +58,12 @@ public @interface Data {
 	 * Default: No static constructor, instead the normal constructor is public.
 	 */
 	String staticConstructor() default "";
+	
+	/**
+	 * Include the result of the superclass's implementation of {@code toString} in the output.
+	 * And Call on the superclass's implementations of {@code equals} and {@code hashCode} before calculating
+	 * for the fields in this class.
+	 * <strong>default: false</strong>
+	 */
+	boolean callSuper() default false;
 }
diff --git a/src/core/lombok/NoArgsConstructor.java b/src/core/lombok/NoArgsConstructor.java
index 985225f..78a72c9 100644
--- a/src/core/lombok/NoArgsConstructor.java
+++ b/src/core/lombok/NoArgsConstructor.java
@@ -47,6 +47,8 @@ public @interface NoArgsConstructor {
 	 */
 	String staticName() default "";
 	
+	boolean callSuper() default false;
+	
 	/**
 	 * Sets the access level of the constructor. By default, generated constructors are {@code public}.
 	 */
diff --git a/src/core/lombok/RequiredArgsConstructor.java b/src/core/lombok/RequiredArgsConstructor.java
index da2d1e1..1687fe5 100644
--- a/src/core/lombok/RequiredArgsConstructor.java
+++ b/src/core/lombok/RequiredArgsConstructor.java
@@ -44,6 +44,8 @@ public @interface RequiredArgsConstructor {
 	 */
 	String staticName() default "";
 	
+	boolean callSuper() default false;
+	
 	/**
 	 * Sets the access level of the constructor. By default, generated constructors are {@code public}.
 	 */
diff --git a/src/core/lombok/eclipse/handlers/HandleData.java b/src/core/lombok/eclipse/handlers/HandleData.java
index ba29b30..79cd2b1 100644
--- a/src/core/lombok/eclipse/handlers/HandleData.java
+++ b/src/core/lombok/eclipse/handlers/HandleData.java
@@ -57,11 +57,16 @@ public class HandleData extends EclipseAnnotationHandler<Data> {
 		//most useful of the many methods built by @Data. This trick won't work for the non-static constructor,
 		//for whatever reason, though you can find callers of that one by focusing on the class name itself
 		//and hitting 'find callers'.
+		Data data = annotation.getInstance();
+		String staticConstructorName = data.staticConstructor();
+		Boolean callSuper = data.callSuper();
+		if (!annotation.isExplicit("callSuper")) callSuper = null;
+		
 		
 		new HandleGetter().generateGetterForType(typeNode, annotationNode, AccessLevel.PUBLIC, true);
 		new HandleSetter().generateSetterForType(typeNode, annotationNode, AccessLevel.PUBLIC, true);
-		new HandleEqualsAndHashCode().generateEqualsAndHashCodeForType(typeNode, annotationNode);
-		new HandleToString().generateToStringForType(typeNode, annotationNode);
-		new HandleConstructor().generateRequiredArgsConstructor(typeNode, AccessLevel.PUBLIC, ann.staticConstructor(), true, ast);
+		new HandleEqualsAndHashCode().generateEqualsAndHashCodeForType(typeNode, annotationNode, callSuper);
+		new HandleToString().generateToStringForType(typeNode, annotationNode, callSuper);
+		new HandleConstructor().generateRequiredArgsConstructor(typeNode, AccessLevel.PUBLIC, staticConstructorName, true, ast);
 	}
 }
diff --git a/src/core/lombok/eclipse/handlers/HandleEqualsAndHashCode.java b/src/core/lombok/eclipse/handlers/HandleEqualsAndHashCode.java
index 83e7828..f1dcf95 100644
--- a/src/core/lombok/eclipse/handlers/HandleEqualsAndHashCode.java
+++ b/src/core/lombok/eclipse/handlers/HandleEqualsAndHashCode.java
@@ -101,7 +101,7 @@ public class HandleEqualsAndHashCode extends EclipseAnnotationHandler<EqualsAndH
 		}
 	}
 	
-	public void generateEqualsAndHashCodeForType(EclipseNode typeNode, EclipseNode errorNode) {
+	public void generateEqualsAndHashCodeForType(EclipseNode typeNode, EclipseNode errorNode, Boolean callSuper) {
 		for (EclipseNode child : typeNode.down()) {
 			if (child.getKind() == Kind.ANNOTATION) {
 				if (annotationTypeMatches(EqualsAndHashCode.class, child)) {
@@ -111,7 +111,7 @@ public class HandleEqualsAndHashCode extends EclipseAnnotationHandler<EqualsAndH
 			}
 		}
 		
-		generateMethods(typeNode, errorNode, null, null, null, false, FieldAccess.GETTER);
+		generateMethods(typeNode, errorNode, null, null, callSuper, false, FieldAccess.GETTER);
 	}
 	
 	@Override public void handle(AnnotationValues<EqualsAndHashCode> annotation,
diff --git a/src/core/lombok/eclipse/handlers/HandleToString.java b/src/core/lombok/eclipse/handlers/HandleToString.java
index 07d88f5..d6ab6c0 100644
--- a/src/core/lombok/eclipse/handlers/HandleToString.java
+++ b/src/core/lombok/eclipse/handlers/HandleToString.java
@@ -80,7 +80,7 @@ public class HandleToString extends EclipseAnnotationHandler<ToString> {
 		}
 	}
 	
-	public void generateToStringForType(EclipseNode typeNode, EclipseNode errorNode) {
+	public void generateToStringForType(EclipseNode typeNode, EclipseNode errorNode, Boolean callSuper) {
 		for (EclipseNode child : typeNode.down()) {
 			if (child.getKind() == Kind.ANNOTATION) {
 				if (annotationTypeMatches(ToString.class, child)) {
@@ -94,7 +94,7 @@ public class HandleToString extends EclipseAnnotationHandler<ToString> {
 		try {
 			includeFieldNames = ((Boolean)ToString.class.getMethod("includeFieldNames").getDefaultValue()).booleanValue();
 		} catch (Exception ignore) {}
-		generateToString(typeNode, errorNode, null, null, includeFieldNames, null, false, FieldAccess.GETTER);
+		generateToString(typeNode, errorNode, null, null, includeFieldNames, callSuper, false, FieldAccess.GETTER);
 	}
 	
 	public void handle(AnnotationValues<ToString> annotation, Annotation ast, EclipseNode annotationNode) {
@@ -285,7 +285,7 @@ public class HandleToString extends EclipseAnnotationHandler<ToString> {
 	private String getTypeName(EclipseNode type) {
 		String typeName = getSingleTypeName(type);
 		EclipseNode upType = type.up();
-		while (upType.getKind() == Kind.TYPE) {
+		if (upType != null) while (upType.getKind() == Kind.TYPE) {
 			typeName = getSingleTypeName(upType) + "." + typeName;
 			upType = upType.up();
 		}
diff --git a/src/core/lombok/javac/handlers/HandleData.java b/src/core/lombok/javac/handlers/HandleData.java
index bec9896..9b092c4 100644
--- a/src/core/lombok/javac/handlers/HandleData.java
+++ b/src/core/lombok/javac/handlers/HandleData.java
@@ -52,13 +52,16 @@ public class HandleData extends JavacAnnotationHandler<Data> {
 			return;
 		}
 		
-		String staticConstructorName = annotation.getInstance().staticConstructor();
+		Data data = annotation.getInstance();
+		String staticConstructorName = data.staticConstructor();
+		Boolean callSuper = data.callSuper();
+		if (!annotation.isExplicit("callSuper")) callSuper = null;
 		
 		// TODO move this to the end OR move it to the top in eclipse.
 		new HandleConstructor().generateRequiredArgsConstructor(typeNode, AccessLevel.PUBLIC, staticConstructorName, true, annotationNode);
 		new HandleGetter().generateGetterForType(typeNode, annotationNode, AccessLevel.PUBLIC, true);
 		new HandleSetter().generateSetterForType(typeNode, annotationNode, AccessLevel.PUBLIC, true);
-		new HandleEqualsAndHashCode().generateEqualsAndHashCodeForType(typeNode, annotationNode);
-		new HandleToString().generateToStringForType(typeNode, annotationNode);
+		new HandleEqualsAndHashCode().generateEqualsAndHashCodeForType(typeNode, annotationNode, callSuper);
+		new HandleToString().generateToStringForType(typeNode, annotationNode, callSuper);
 	}
 }
diff --git a/src/core/lombok/javac/handlers/HandleEqualsAndHashCode.java b/src/core/lombok/javac/handlers/HandleEqualsAndHashCode.java
index 0a9d4cc..911ec8e 100644
--- a/src/core/lombok/javac/handlers/HandleEqualsAndHashCode.java
+++ b/src/core/lombok/javac/handlers/HandleEqualsAndHashCode.java
@@ -100,7 +100,7 @@ public class HandleEqualsAndHashCode extends JavacAnnotationHandler<EqualsAndHas
 		generateMethods(typeNode, annotationNode, excludes, includes, callSuper, true, fieldAccess);
 	}
 	
-	public void generateEqualsAndHashCodeForType(JavacNode typeNode, JavacNode source) {
+	public void generateEqualsAndHashCodeForType(JavacNode typeNode, JavacNode source, Boolean callSuper) {
 		for (JavacNode child : typeNode.down()) {
 			if (child.getKind() == Kind.ANNOTATION) {
 				if (annotationTypeMatches(EqualsAndHashCode.class, child)) {
@@ -110,7 +110,7 @@ public class HandleEqualsAndHashCode extends JavacAnnotationHandler<EqualsAndHas
 			}
 		}
 		
-		generateMethods(typeNode, source, null, null, null, false, FieldAccess.GETTER);
+		generateMethods(typeNode, source, null, null, callSuper, false, FieldAccess.GETTER);
 	}
 	
 	private void generateMethods(JavacNode typeNode, JavacNode source, List<String> excludes, List<String> includes,
diff --git a/src/core/lombok/javac/handlers/HandleToString.java b/src/core/lombok/javac/handlers/HandleToString.java
index a5fb099..9004617 100644
--- a/src/core/lombok/javac/handlers/HandleToString.java
+++ b/src/core/lombok/javac/handlers/HandleToString.java
@@ -94,7 +94,7 @@ public class HandleToString extends JavacAnnotationHandler<ToString> {
 		generateToString(typeNode, annotationNode, excludes, includes, ann.includeFieldNames(), callSuper, true, fieldAccess);
 	}
 	
-	public void generateToStringForType(JavacNode typeNode, JavacNode errorNode) {
+	public void generateToStringForType(JavacNode typeNode, JavacNode errorNode, Boolean callSuper) {
 		for (JavacNode child : typeNode.down()) {
 			if (child.getKind() == Kind.ANNOTATION) {
 				if (annotationTypeMatches(ToString.class, child)) {
@@ -108,7 +108,7 @@ public class HandleToString extends JavacAnnotationHandler<ToString> {
 		try {
 			includeFieldNames = ((Boolean)ToString.class.getMethod("includeFieldNames").getDefaultValue()).booleanValue();
 		} catch (Exception ignore) {}
-		generateToString(typeNode, errorNode, null, null, includeFieldNames, null, false, FieldAccess.GETTER);
+		generateToString(typeNode, errorNode, null, null, includeFieldNames, callSuper, false, FieldAccess.GETTER);
 	}
 	
 	private void generateToString(JavacNode typeNode, JavacNode source, List<String> excludes, List<String> includes,

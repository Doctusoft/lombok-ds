public class YieldExample {
	public void test() {
		for (Long fib : filterMod(5, fibunacci())) {
			System.out.println(fib);
		}
	}
	
	public Iterable<Long> fibunacci() {
		class $YielderFibunacci implements Iterator<Long>, Iterable<Long>, Closeable {
			private long a;
			private long b;
			private long c;
			private int $state;
			private boolean $hasNext;
			private boolean $nextDefined;
			private Long $next;
			
			public Iterator<Long> iterator() {
				if ($state == 0) {
					$state = 1;
					return this;
				} else return new $YielderFibunacci();
			}
			
			public boolean hasNext() {
				if (!$nextDefined) {
					$hasNext = getNext();
					$nextDefined = true;
				}
				return $hasNext;
			}
			
			public Long next() {
				if (!hasNext()) throw new NoSuchElementException();
				$nextDefined = false;
				return $next;
			}
			
			public void remove() {
				throw new UnsupportedOperationException();
			}
			
			public void close() {
				$state = 4;
			}
			
			private boolean getNext() {
				while (true) switch ($state) {
				case 0:
					$state = 1;
				case 1:
					a = 0;
					b = 1;
				case 2:
					if (!(b <= 0)) {
						$state = 4;
						continue;
					}
					$next = a;
					$state = 3;
					return true;
				case 3:
					c = a + b;
					a = b;
					b = c;
					$state = 2;
					continue;
				case 4: 
				default: 
					return false;
				}
			}
		}
		return new $YielderFibunacci();
	}
	
	public Iterable<Long> filterMod(final long mod, final Iterable<Long> values) {
		class $YielderFilterMod implements Iterator<Long>, Iterable<Long>, Closeable {
			private Long value;
			private Iterator $valueIter;
			private int $state;
			private boolean $hasNext;
			private boolean $nextDefined;
			private Long $next;
			
			public Iterator<Long> iterator() {
				if ($state == 0) {
					$state = 1;
					return this;
				} else return new $YielderFilterMod();
			}
			
			public boolean hasNext() {
				if (!$nextDefined) {
					$hasNext = getNext();
					$nextDefined = true;
				}
				return $hasNext;
			}
			
			public Long next() {
				if (!hasNext()) throw new NoSuchElementException();
				$nextDefined = false;
				return $next;
			}
			
			public void remove() {
				throw new UnsupportedOperationException();
			}
			
			public void close() {
				$state = 4;
			}
			
			private boolean getNext() {
				while (true) switch ($state) {
				case 0:
					$state = 1;
				case 1:
					$valueIter = values.iterator();
				case 2:
					if (!$valueIter.hasNext()) {
						$state = 4;
						continue;
					}
					value = (Long)$valueIter.next();
					if (!((value.longValue() % mod) == 0)) {
						$state = 3;
						continue;
					}
					$next = value;
					$state = 3;
					return true;
				case 3:
					$state = 2;
					continue;
				case 4: 
				default: 
					return false;
				}
			}
		}
		return new $YielderFilterMod();
	}
}
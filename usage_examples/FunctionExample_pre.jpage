import lombok.ExtensionMethod;
import lombok.Function;
import java.util.Arrays;
import lombok.Functions.Function1;
import static lombok.Yield.yield;

@ExtensionMethod(Operations.class)
public class Main {

	public static void main(String[] args) {

		new String[] { "john", "james", "eddie" }.toList().filter(startsWith("j")).map(toUpperCase()).print('-');
		// outputs "JOHN-JAMES"
	}

	@function
	private static boolean startsWith(String element, String _prefix) {
		return element.startsWith(_prefix);
	}

	@function
	private static String toUpperCase(String element) {
		return element.toUpperCase();
	}
}

public class Operations {

	public static <T> Iterable<T> filter(final Iterable<T> list, final Function1<T, Boolean> filter) {
		for (T element : list) if (filter.apply(element)) yield(element);
	}

	public static <S, T> Iterable<T> map(final Iterable<S> list, final Function1<S, T> mapping) {
		for (S element : list) yield(mapping.apply(element));
	}

	public static <T> Iterable<T> toList(final T[] array) {
		return Arrays.asList(array);
	}

	public static <T> void print(final Iterable<T> list, final char delimiter) {
		StringBuilder sb = new StringBuilder();
		for (T element : list) {
			sb.append(element.toString());
			sb.append(delimiter);
		}

		System.out.println(sb.length() > 0 ? sb.substring(0, sb.length() - 1) : "");
	}
}
